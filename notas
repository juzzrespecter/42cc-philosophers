1. 		what is a fork && when should a philosopher take one

	now - odds take right fork, evens take left, pairs of philosophers fight for the same
		  fork and the winner blocks the loser, this guarantees at least one philosopher eating
	what is not working with this - the system does not guarantee the winning philo. can eat, 
	this can only happen if only every odd or even philo on each fight wins, if that is not
	the case an even philo can still block a fork without using it.
	the issue in this method, a philosopher can have one of its two forks available,
	but it will not be taken as the philo is waiting for the other one to be unlocked
	first
	
	fork as mutex, taking a fork as mutex_lock, philo routine gets blocked when trying to take
	a fork in use.
	
	fork as switch := { mutex, bool }, taking a fork as checking if bool == false (how?), 
	philo routine waits in a loop checking bool status (not blocked), can replace monitor thread.
	mutex to edit fork value. 
